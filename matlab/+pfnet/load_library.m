function load_library

  % Load PFNET
  %%%%%%%%%%%%

  root = getenv('PFNET');
  header = fullfile(root,'include','pfnet','pfnet.h');
  lib = fullfile(root,'lib','libpfnet.so');

  if libisloaded('libpfnet')
     unloadlibrary libpfnet
  end
  warning('off','all');
  loadlibrary(lib,header,...
	      'addheader','types.h',...
	      'addheader','net.h',...
	      'addheader','gen.h',...
	      'addheader','graph.h',...
	      'addheader','bus.h',...
	      'addheader','branch.h',...
	      'addheader','load.h',...
	      'addheader','shunt.h',...
	      'addheader','func.h',...
	      'addheader','constr.h',...
	      'addheader','prob.h',...
	      'addheader','vector.h',...
	      'addheader','matrix.h');
  warning('on','all');

  % Load defines
  %%%%%%%%%%%%%%
  headers = {fullfile(root,'include','pfnet','obj_types.h'),...
             fullfile(root,'include','pfnet','flag_types.h'),...
	     fullfile(root,'include','pfnet','constants.h'),...
	     fullfile(root,'include','pfnet','bus.h'),...
	     fullfile(root,'include','pfnet','branch.h'),...
	     fullfile(root,'include','pfnet','gen.h'),...
	     fullfile(root,'include','pfnet','load.h'),...
	     fullfile(root,'include','pfnet','shunt.h'),...
	     fullfile(root,'include','pfnet','net.h'),...
	     fullfile(root,'include','pfnet','graph.h'),...
	     fullfile(root,'include','pfnet','func.h'),...
	     fullfile(root,'include','pfnet','constr.h'),...
	     fullfile(root,'include','pfnet','problem.h')};

  for header = headers
    f = fopen(header{1},'rt');
    s = char(fread(f)');
    v = regexp(s,'#define\s+(\S+)\s+(\S+)','tokens');
    counter = 0;
    for e = v
       if counter ~= 0
        if strfind(e{1}{2},'x')
           evalin('caller',strcat(e{1}{1},'=',num2str(sscanf(e{1}{2},'%x')),';'));
        else
           value = strrep(e{1}{2},'"','''');
           evalin('caller',strcat(e{1}{1},'=',value,';'));
        end
       end
       counter = counter+1;
    end
    fclose(f);
  end

end

